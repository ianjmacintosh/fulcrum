/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ResumesRouteImport } from './routes/resumes'
import { Route as JobBoardsRouteImport } from './routes/job-boards'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ApplicationsRouteImport } from './routes/applications'
import { Route as IndexRouteImport } from './routes/index'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ResumesRoute = ResumesRouteImport.update({
  id: '/resumes',
  path: '/resumes',
  getParentRoute: () => rootRouteImport,
} as any)
const JobBoardsRoute = JobBoardsRouteImport.update({
  id: '/job-boards',
  path: '/job-boards',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsRoute = ApplicationsRouteImport.update({
  id: '/applications',
  path: '/applications',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/applications': typeof ApplicationsRoute
  '/dashboard': typeof DashboardRoute
  '/job-boards': typeof JobBoardsRoute
  '/resumes': typeof ResumesRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/applications': typeof ApplicationsRoute
  '/dashboard': typeof DashboardRoute
  '/job-boards': typeof JobBoardsRoute
  '/resumes': typeof ResumesRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/applications': typeof ApplicationsRoute
  '/dashboard': typeof DashboardRoute
  '/job-boards': typeof JobBoardsRoute
  '/resumes': typeof ResumesRoute
  '/settings': typeof SettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/applications'
    | '/dashboard'
    | '/job-boards'
    | '/resumes'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/applications'
    | '/dashboard'
    | '/job-boards'
    | '/resumes'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/applications'
    | '/dashboard'
    | '/job-boards'
    | '/resumes'
    | '/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApplicationsRoute: typeof ApplicationsRoute
  DashboardRoute: typeof DashboardRoute
  JobBoardsRoute: typeof JobBoardsRoute
  ResumesRoute: typeof ResumesRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resumes': {
      id: '/resumes'
      path: '/resumes'
      fullPath: '/resumes'
      preLoaderRoute: typeof ResumesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/job-boards': {
      id: '/job-boards'
      path: '/job-boards'
      fullPath: '/job-boards'
      preLoaderRoute: typeof JobBoardsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications': {
      id: '/applications'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof ApplicationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApplicationsRoute: ApplicationsRoute,
  DashboardRoute: DashboardRoute,
  JobBoardsRoute: JobBoardsRoute,
  ResumesRoute: ResumesRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
